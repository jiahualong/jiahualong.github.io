<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OrientDB Cookie]]></title>
    <url>%2F2019%2F08%2F03%2Forientdb%2Forientdb-cookie%2F</url>
    <content type="text"><![CDATA[Docker安装OrientDB1234docker run -d --name orientdb \ -p 2424:2424 -p 2480:2480 \ -e ORIENTDB_ROOT_PASSWORD=root \ orientdb:3.0.22-tp3 2424 port 应用连接, 2480 port web管理平台 orientdb链接密码为root 3.x 相比2.x 在java引用jar中有不同 orientdb:3.0.22-tp3 与 orientdb:3.0.22不同之处在于tp3添加了Gremlin支持 3.x在Redhat6.8版本启动可能会有问题 web管理平台http://localhost:2480 通过orientdb console1234# 进入orientdb容器dexec orientdb# 启动console/orientdb/bin/console.sh 连接 orientdb1connect remote:127.0.0.1 root root 连接 orientdb 的test1库1connect remote:127.0.0.1/test1 root root 显示当前有多少图库1list database 创建图库图库名为test1 帐号密码为root1create database remote:127.0.0.1/test1 root root 删除图库1drop database remote:127.0.0.1/test1 root root 导出图库将test1导出在/tmp/bacup-test1.gz12connect remote:127.0.0.1/test1 root rootexport database /tmp/backup-test1 导入图库将bacup-test1.gz导入 12connect remote:127.0.0.1/test1 root rootimport database /tmp/backup-test1.gz --reserveClusterIDs=true 引用 OrientDB3手册]]></content>
      <categories>
        <category>graphdb</category>
      </categories>
      <tags>
        <tag>orientdb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debain Mirros]]></title>
    <url>%2F2019%2F07%2F21%2Fdebian%2Fdebian-cookie%2F</url>
    <content type="text"><![CDATA[清华debian源 12345678deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main non-free contribdeb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main non-free contribdeb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main non-free contribdeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main non-free contribdeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main non-free contribdeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main non-free contribdeb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main non-free contribdeb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main non-free contrib xface 自动登录sudo vim /etc/lightdm/lightdm.confautologin-user=younameautologin-user-timeout=0 # 查看ip 1ip addr show Media change: please insert the disc labeledsudo sed -i ‘/cdrom/d’ /etc/apt/sources.listgrep -v ‘#’ /etc/apt/sources.list]]></content>
      <categories>
        <category>debian</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ngrok Cookie]]></title>
    <url>%2F2019%2F07%2F17%2Fngrok%2Fngrok-cookie%2F</url>
    <content type="text"><![CDATA[TODO: 从零教你搭建ngrok服务，解决外网调试本地站点https://morongs.github.io/2016/12/28/dajian-ngrok/ CentOS7搭建ngrok服务器https://www.xncoding.com/2017/12/29/web/ngrok.html ngrok 服务端安装https://www.jianshu.com/p/d1cdfab9f571]]></content>
      <categories>
        <category>ngrok</category>
      </categories>
      <tags>
        <tag>ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Cookie]]></title>
    <url>%2F2019%2F07%2F16%2Fpython%2Fpython-cookie%2F</url>
    <content type="text"><![CDATA[python中调用shell12import osos.system('ls -hl')]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu cookie]]></title>
    <url>%2F2019%2F07%2F16%2Fubuntu%2Fubuntu-cookie%2F</url>
    <content type="text"><![CDATA[安装simple-chinese1sudo apt install language-pack-zh-hans-base/bionic-updates language-pack-zh-hans/bionic-updates ##]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[aria2-cookie]]></title>
    <url>%2F2019%2F07%2F16%2Faria2%2Faria2-cookie%2F</url>
    <content type="text"><![CDATA[Install Aria21sudo apt install aria2 Usage in command通过http下载文件1$ aria2c http://example.org/mylinux.iso Download from 2 sources:1$ aria2c http://a/f.iso ftp://b/f.iso Download using 2 connections per host:1$ aria2c -x2 http://a/f.iso 下载BT种子及文件本体1$ aria2c http://example.org/mylinux.torrent 下载过程ctrl+c 取消下载，再次下载时会继续下载 BitTorrent Magnet URI:1$ aria2c &apos;magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C&apos; Metalink:1$ aria2c http://example.org/mylinux.metalink 从文本中下载很多url1$ aria2c -i uris.txt aria2 后台启动信息https://github.com/binux/yaaw TODO: https://github.com/binux/yaaw UsageRun aria2 with RPC enabledaria2c –enable-rpc –rpc-listen-all=true –rpc-allow-origin-all with ‘JSON-RPC PATH’ like http://hostname:port/jsonrpc Recommend: Set –rpc-secret= if you are using aria2 1.18.4(or higher) with ‘JSON-RPC PATH’ like http://token:secret@hostname:port/jsonrpc Set –rpc-user= –rpc-passwd= if you are using aria2 1.15.2(or higher) with ‘JSON-RPC PATH’ like http://username:passwd@hostname:port/jsonrpc Visit index.html. Change “JSON-RPC Path” setting if “Internal server error” occurred. All your settings on web is temporary. Settings will be lost after aria2 restarted.Tasks(including which is not finished) will be lost after aria2 restarted. Using –save-session=SOME/WHERE and reload with –continue=true –input-file=SOME/WHERE to continue.Using $HOME/.aria2/aria2.conf to save your options.For more infomations about aria2, visit Aria2 ManualYAAW also support websocket! Set JSON-RPC PATH with ws://hostname:port/jsonrpc.Pre-spicify or save JSON-PRC PATH as bookmark with http://binux.github.io/yaaw/demo/#path=http://hostname:port/jsonrpc /Applications/Aria2GUI.app/Contents/Resources/aria2c –dir=/Users/hualong/Downloads –conf-path=/Applications/Aria2GUI.app/Contents/Resources/aria2.conf –input-file=/Applications/Aria2GUI.app/Contents/Resources/aria2.session –save-session=/Applications/Aria2GUI.app/Contents/Resources/aria2.session –max-concurrent-downloads=10 –max-connection-per-server=16 –min-split-size=1024K –split=16 –max-overall-download-limit=0K –max-overall-upload-limit=0K –max-download-limit=0K –max-upload-limit=0K –continue=true –auto-file-renaming=true –allow-overwrite=true –disk-cache=0M –max-tries=0 –retry-wait=5 -D aria2c –enable-rpc –rpc-listen-all=true –rpc-allow-origin-all WebUI-Aria2install webui-aria2 webui-aria2: Web browser interface for aria2 (2012 GSOC project) ## #TODO 安装 webui https://github.com/ziahamza/webui-aria2 # 插件 brew search Aria2GUI brew cask install maria YAAW for Chrome 引用 aria2 Yet Another Aria2 Webui in pure HTML/CSS/Javascirpt“; Aria2 + Ubuntu 16.04 + Apache2 + Web UI Aria2配置教程（Mac和Windows） Aria2 Manual]]></content>
      <categories>
        <category>aria2</category>
      </categories>
      <tags>
        <tag>aria2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[graphql cookie book]]></title>
    <url>%2F2019%2F07%2F15%2Fgraphql%2Fgraphql%2F</url>
    <content type="text"><![CDATA[Graphql Cookie## SpringBoot两个graphql-spring-boot-starter 分别由两个团队开发 com.graphql-java Maven版本 website com.graphql-java-kickstart Maven 版本 website graphql-java-kickstart包含的组建123456789//需要kotliin支持kotlin.version = &apos;1.3.41&apos;//kickstart graphqlimplementation &apos;com.graphql-java-kickstart:graphql-spring-boot-starter:5.10.0&apos;implementation &apos;com.graphql-java-kickstart:graphiql-spring-boot-starter:5.10.0&apos;implementation &apos;com.graphql-java-kickstart:graphql-java-tools:5.6.1&apos;implementation &apos;com.graphql-java-kickstart:voyager-spring-boot-starter:5.10.0&apos;implementation &apos;com.graphql-java-kickstart:altair-spring-boot-starter:5.10.0&apos; codehttps://github.com/jiahualong/java-example/tree/master/spring-graphql 引用 Which graphql-spring-boot-starter should I choose? graphql-java-kickstart项目 Spring boot中使用GraphQL编写API的几种方式]]></content>
      <categories>
        <category>graphql</category>
      </categories>
      <tags>
        <tag>graphql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dell P2415Q 使用 MacBookPro 2015 使用4k@60Hz刷新率]]></title>
    <url>%2F2019%2F07%2F08%2Fmac%2FDell-P2415Q-4k-60hz%2F</url>
    <content type="text"><![CDATA[环境电脑 MacBook Pro (Retina, 15-inch, Mid 2015) 2.5 GHz Intel Core i7 16 GB 1600 MHz DDR3 AMD Radeon R9 M370X 2 GB Intel Iris Pro 1536 MB MacBookPro2015的雷电口可以支持4k@60Hz, 这里要注意的是 HDMI口不支持4k@60hz,需要使用雷电/miniDP转DP的线。miniDP与雷电口兼容。 显示器 Dell P2415Q Dell P2415Q显示器最高支持3840x2160@60Hz(4k@60hz)。 这里需要注意的是需要关闭MST: Dell显示器 - 设置 - 菜单 - 显示 - MST - 关 。 MST选项的含义:12345678确认的DisplayPort(DP)配置的显示屏。如果您的系统支持DP版本1.2,显示器可以显示的分辨率3840x2160@60Hz。 显示multi-stream传输(MST)应设置为&quot;Off&quot;,这是默认状态。MST关闭:(dp1.2模式的单个显示器设置)默认模式:4k*2K60Hz禁用MST功能。MST主要:MST(dp1.2模式的菊花链式安装)功能已启用的主显示器菊花链式安装中。 预期的解决方案是4k*2K30Hz的MST(DP)已启用。MST二级:(dp1.1的菊花链式和单个显示屏设置)MST功能被禁用的第二个显示器菊花链式安装中预期的解决方案是4k*2K30Hz的MST(DP)已禁用。如果计算机支持DP版本1.1,显示器将无法实现3840x2160@60Hz。 它将支持较低60Hz的分辨率(如2560 x 1440或设为1920x1080。通过显示器的屏上显示菜单(OSD)(屏上显示(OSD),请更改选项从MST&quot;关闭&quot;MST&quot;二级&quot;(要更改显示器的设置从DP1.2至1.1)。 Through the Monitor’s On-Screen Display menu (OSD), change the option from MST “OFF” to MST “Secondary” (You are changing the monitor’s setting from DP 1.2 to 1.1).可能需要重新启动计算机显示器设置激活。 来自如何解决在DP/Mini DP无视频/解析错误问题与Dell P2715q/ p 2415 q平板显示器 线材 联基minidp转dp 1.4版 官方标注支持: 1080p:60Hz-480Hz; 2K:60Hz-240Hz; 4K:60Hz-144Hz; 8K:60Hz 系统 macOS Mojave 10.14.5 软件 EasyRes 1.1.1 方便设置分辨率 参考 如何解决在DP/Mini DP无视频/解析错误问题与Dell P2715q/ p 2415 q平板显示器 dell P2415Q 实现 4K 60Hz]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>macOS</tag>
        <tag>p2415q - 4k</tag>
        <tag>60Hz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iStats]]></title>
    <url>%2F2019%2F06%2F26%2Fmac%2Fmac-istats%2F</url>
    <content type="text"><![CDATA[intall iStats1gem install iStats run1istats [ref]http://chris911.github.io/iStats/()]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>macOS</tag>
        <tag>command Tools</tag>
        <tag>istats</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gem cookie book]]></title>
    <url>%2F2019%2F06%2F26%2Fcoreutil%2Fgem%2F</url>
    <content type="text"><![CDATA[查看gem环境配置1gem environment 安装目前为以下字段 INSTALLATION DIRECTORY GEM PATHS ref]]></content>
      <categories>
        <category>coreutil</category>
      </categories>
      <tags>
        <tag>coreutil</tag>
        <tag>gem</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssh tunnel]]></title>
    <url>%2F2019%2F06%2F19%2Fcoreutil%2Fssh-tunnel%2F</url>
    <content type="text"><![CDATA[内网机ssh -CfNg -R 1026:127.0.0.1:22 10.1.1.176 公网机ssh -CfNg -L 1025:0.0.0.0:1026 10.1.1.176 ssh s@10.1.1.176 -p1025 command description:-C：压缩数据传输。-f ：后台认证用户/密码，通常和-N连用，不用登录到远程主机。-N ：不执行脚本或命令，通常与-f连用。-g ：在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。-L 本地端口:目标IP:目标端口-T 不分配 TTY 只做代理用-q 安静模式，不输出 错误/警告 信息 refSSH 映射]]></content>
      <categories>
        <category>coreutil</category>
      </categories>
      <tags>
        <tag>coreutil</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jooq 生成SQL]]></title>
    <url>%2F2019%2F06%2F11%2Fjava%2Fjooq%2F</url>
    <content type="text"><![CDATA[引入依赖12345&lt;dependency&gt; &lt;groupId&gt;org.jooq&lt;/groupId&gt; &lt;artifactId&gt;jooq&lt;/artifactId&gt; &lt;version&gt;3.11.11&lt;/version&gt;&lt;/dependency&gt; 生成CREATE语句123456789System.out.println( DSL.using(SQLDialect.MYSQL_8_0).createTable("user") .column("id", SQLDataType.BIGINT.precision(20)) .column("name", SQLDataType.VARCHAR.precision(20)) .constraints( constraint("PK_MY_TABLE").primaryKey("id") ) .getSQL() ); 注要使用Oracle等大多数方言需要购买商用版]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jooq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debian 8 / 9 Set TimeZone]]></title>
    <url>%2F2019%2F06%2F04%2Fdebian%2Fdebian-timezone%2F</url>
    <content type="text"><![CDATA[Debian 8 Set TimeZone +812echo &quot;Asia/Shanghai&quot; &gt; /etc/timezonedpkg-reconfigure -f noninteractive tzdata Debian 9 Set TimeZone +8ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtimedpkg-reconfigure -f noninteractive tzdata 在Dockerfile中配置时区(Debian8)12RUN echo &quot;Asia/Shanghai&quot; &gt; /etc/timezoneRUN dpkg-reconfigure -f noninteractive tzdata 在MySQL JDBC 8中设置时区1serverTimezone=GMT%2B8 REFCHANGING THE TIMEZONE IN DEBIAN 9 (STRETCH)Docker 中如何设置 container 的时区JDBC连接数据库 mysql serverTimezone useSSL 时差]]></content>
      <categories>
        <category>debian</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Intellij IDEA 卡顿]]></title>
    <url>%2F2019%2F05%2F27%2Fidea%2Fidea-%E5%8D%A1%E9%A1%BF%2F</url>
    <content type="text"><![CDATA[环境 15-inch Mid 2015 MacBookPro macOS 10.14 IDEA 2019.1.2 IdeaVim 问题及解决方案在调整了macOS屏幕缩放后，IdeaVim jk有延迟感，很卡. 安装Idea Plugin JB SDK Bintray Downloader, 重启Idea后按 Shit+Cmd+A 输入Get JB SDK from Bintay 为Idea下载最新版JDK, b后面数据越大越新. 下载了jbsdk11b125_osx_x64.tar.gz后，按install ，重启后即可. 如果在下载过程中提示JDK mx内存不足请设置成2048 或者使用brew cask install Resolutionator将显示调整为非Retina TipsShit+CMD+A Find Action 仅在主界面时可按. Get JB SDK 为下载idea JDK Switch Boot JDK 可切换启动JDK 参见Selecting the JDK version the IDE will run under在OS X上使用4K显示器时，IDE速度非常慢]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis-plus 3.1.1 bug]]></title>
    <url>%2F2019%2F05%2F24%2Fspring%2Fmybatis-plus-bug%2F</url>
    <content type="text"><![CDATA[SpringTest中正常， SPringApplication中不正常, 用的同一个配置Mybatis plus 3.1.1 12org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error evaluating expression &apos;ew.sqlSegment != null and ew.sqlSegment != &apos;&apos; and ew.nonEmptyOfWhere&apos;. Cause: org.apache.ibatis.ognl.OgnlException: sqlSegment [com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Your property named &quot;XXXXXXX&quot; cannot find the corresponding database column name!] at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77) ~[mybatis-spring-2.0.1.jar:2.0.1]]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Compile With Docker Maven]]></title>
    <url>%2F2019%2F05%2F23%2Fdocker%2Fdocker-maven%2F</url>
    <content type="text"><![CDATA[docker maven images1docker pull 3-jdk-8 [link](https://hub.docker.com/_/maven) mvn package 当前目录 1234docker run -it --rm --name my-maven-project \ -v "$(pwd)":/usr/src/mymaven \ -w /usr/src/mymaven maven:3-jdk-8 \ mvn clean package mvn package 当前目录,并使用本地/data/m2目录的maven配置 12345docker run -it --rm --name maven-project-xxx \ -v /data/m2:/root/.m2 \ -v &quot;$(pwd)&quot;:/usr/src/mvnp \ -w /usr/src/mvnp maven:3-jdk-8 \ mvn clean package 使用非root运行1docker run -v ~/.m2:/var/maven/.m2 -ti --rm -u 1000 -e MAVEN_CONFIG=/var/maven/.m2 maven mvn -Duser.home=/var/maven archetype:generate]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Feign Name already been defined]]></title>
    <url>%2F2019%2F05%2F20%2Fspring%2Ffeign-name-already-been-defined%2F</url>
    <content type="text"><![CDATA[FeignClient使用相同名字时会提示重名并无法启动,可以通过添加contextId进行区分两个client 12345@FeignClient(contextId = &quot;a&quot;, name = &quot;User&quot;, configuration = FeignClientsConfiguration.class)...@FeignClient(contextId = &quot;b&quot;, name = &quot;User&quot;, configuration = FeignClientsConfiguration.class)... error123456The bean FeignClientSpecification&apos;, defined in null, could not be registered. A bean with that name has already been defined in null and overriding is disabled.Caused by: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name xxxx.FeignClientSpecification&apos; defined in null: Cannot register bean definition [Generic bean: class [org.springframework.cloud.openfeign.FeignClientSpecificatio...]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>feign</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[7za cookie book]]></title>
    <url>%2F2019%2F05%2F16%2Fcoreutil%2F7za%2F</url>
    <content type="text"><![CDATA[将mydir压缩成 hello.7z7za a hello.7z mydir 将mydir压缩成 hello.7z 并加密7za a -p hello.7z mydir Test压缩包7za t hello.7z 设置压缩等级7za a hello.7z mydir -mx=0 0为不压缩，最高为9,默认为5]]></content>
      <categories>
        <category>coreutil</category>
      </categories>
      <tags>
        <tag>coreutil</tag>
        <tag>7za</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tmux invalid option windows-status-fg]]></title>
    <url>%2F2019%2F05%2F06%2Fcoreutil%2Ftmux%2F</url>
    <content type="text"><![CDATA[tmux 2.9开始将不再支持-bg风格配置,将会由 123set -g mode-bg yellowset -g mode-fg redset -g mode-attr blink,underline 改为 1set -g mode-style fg=yellow,bg=red,blink,underline ref]]></content>
      <categories>
        <category>coreutil</category>
      </categories>
      <tags>
        <tag>coreutil</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[unzip xz file]]></title>
    <url>%2F2019%2F05%2F06%2Fcoreutil%2Fxz%2F</url>
    <content type="text"><![CDATA[macOS12345brew install xzxz -d youfile.xzunxz &lt; file.tar.xz &gt; file.tarxz -dc &lt; file.tar.xz &gt; file.tar Ubuntu123456sudo apt install xz-utilstar xf archive.tar.xztar xf archive.tar.gztar xf archive.tartar cfJ &lt;archive.tar.xz&gt; &lt;files&gt; 1tar -xJf file.pkg.tar.xz The -J is the flag that specifically deals with .xz files.]]></content>
      <categories>
        <category>coreutil</category>
      </categories>
      <tags>
        <tag>coreutil</tag>
        <tag>xz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[freebsd apk instal java]]></title>
    <url>%2F2019%2F05%2F06%2Ffreebsd%2Ffreebsd-java%2F</url>
    <content type="text"><![CDATA[环境 FreeBSD 11.1 OpenJDK installsudo pkg install openjdk mount filessudo mount -t fdescfs fdesc /dev/fd sudo mount -t procfs proc /proc auto mount filesudo vi /etc/fstab Insert the following mount information into the file: 12fdesc /dev/fd fdescfs rw 0 0proc /proc procfs rw 0 0 Save and exit. 参考]]></content>
      <categories>
        <category>freebsd</category>
      </categories>
      <tags>
        <tag>FreeBSD</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS 创建 FreeBSD 安装U盘]]></title>
    <url>%2F2019%2F05%2F05%2Ffreebsd%2Fmac-freebsd-install-usb-stock%2F</url>
    <content type="text"><![CDATA[本文将在Mac上制作FreeBSD系统安装U盘 Setup1 获取FreeBSD镜像FreeBSD-11.0-RELEASE-amd64-memstick.img Setup2 找到U盘盘符接入U盘之前查看目前硬盘列表 diskutil list 将U盘接入Mac后再次查看硬盘列表 diskutil list 对比多出的即为U盘 本例中为 `/dev/disk2` 卸载disk2 diskutil unmountDisk disk2 Setup3 烧录镜像sudo dd if=./FreeBSD-11.0-RELEASE-amd64-memstick.img of=/dev/rdisk2 bs=1m]]></content>
      <categories>
        <category>freebsd</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>macOS</tag>
        <tag>FreeBSD</tag>
        <tag>安装U盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome Cookies]]></title>
    <url>%2F2019%2F05%2F03%2Fchrome%2Fclome-cookies%2F</url>
    <content type="text"><![CDATA[chrome导入jquery1234567if (!window.jQuery) &#123; document.body.appendChild((function()&#123; var s = document.createElement("script"); s.src = '//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js'; return s; &#125;)());&#125; chrome flagschrome://flags/]]></content>
      <categories>
        <category>chrome</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Clojure Start]]></title>
    <url>%2F2019%2F05%2F01%2Fclojure%2Fclojure-start%2F</url>
    <content type="text"><![CDATA[install Clojure REPL (Read Evan Print Loop) leiningenbrew install lein 创建项目lein new helloworld cd helloworld 进入 repllein repl 测试(+ 1 1) 退出(quit) 字面值=&gt; 42 42 =&gt; 12.1 12.1 =&gt; 1/3 1/3 =&gt;4.0/2 =&gt; (/ 1 3) 1/3 =&gt; (/ 1 3.0) 0.333333333 文本&quot;jam&quot; 关键字:jam 字符\j booleantrue false nullnil clojure 结构基本 ;; 开始是注释 输入数字 打印数字 输入小数 打印小数 输入分数 不可约整数 1/3 打印 1/3 输入分数 可约的整数 4/2 打印 2 输入分数 小数 出错 4.0/2 函数操作符放在前面 (/ 1 3) ;; 1/3(/ 1 3) ;; 0.333333333333333 输入字符串“hello world” ;; hello world 输入字符，字符前加\\j ;; 字符j true false nil 嵌套(+ 1 (+ 1 1) ;; 3 容器Collection list vector map set Clojure vector使用vector收集向量数据 [1 2 :hello “name”] first 返回第一个元素 rest 返回最后一个元素 nth 返回第n个元素 last 返回最后一个元素， vector比list更有效率 count 返回大小 conj 向列表中加添元素 (vector 在末尾添, list 在头部添) cons 被添完后只会成为 list (nth [ 1 2 3 ] 0);; 1 (nth [ 1 2 3 ] 3);; OutOfIndex (count [1 2 3 4 ]);; 4 conj 添加元素conj vector 添加到末尾(conj [1 2 3] 4);; [1 2 3 4](conj [1 2 3] 4 5);; [1 2 3 4 5] conj list 添加到开始(conj ‘(1 2 3) 4);; (4 1 2 3) (conj ‘(1 2 3) 4 5);; (5 4 1 2 3) Clojure List创建 list‘(1 2 “jam” :hello) ;;惯用法‘(1, 2, “jam”, :hello)‘(1 2 3 4 5 6)(list 1 2 3 4 5 6) ;;使用list函数) 操作list first 返回第一个元素, first 为空时返回 nill rest 返回除第一个之后的所有元素, rest 为空时返回 () cons 参数为两个， 一个是元素，第二个是列表 (cons 5 ‘()) ;; (5) 因列表末尾是nil，所以可以用nil指一个列表(cons 5 nil) ;; (5) 多个cons(cons 2 (cons 3 (cons 4 (cons 5 nil))));;(2 3 4 5) ‘(1 2 3 4 5)]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu apt Cookie]]></title>
    <url>%2F2019%2F04%2F30%2Fubuntu%2Fubuntu-apt%2F</url>
    <content type="text"><![CDATA[apt cache tmp file location/var/cache/apt/archives/ clean tmp fileapt clean apt autoclean apt autoremove apt 走 socks*12apt install tsocksvi /etc/tsocks.conf 123456local = 192.168.1.0/255.255.255.0 local = 127.0.0.0/255.0.0.0server = 0.0.0.0 #socks IPserver_type = 5 #socks versionserver_port = 24 ＃socks port 1tsocks apt install xxxx ref]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>apt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Docker in Ubuntu 18.04]]></title>
    <url>%2F2019%2F04%2F27%2Fdocker%2Fdocker-ubuntu18%2F</url>
    <content type="text"><![CDATA[uninstall old versionsudo apt-get remove docker docker-engine docker.io containerd runc update respsudo apt-get update sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg-agent \ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \ "deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) \ stable" #-or- sudo add-apt-repository \ "deb [arch=amd64] https://download.docker.com/linux/ubuntu \ bionic \ stable" sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io refGet Docker CE for Ubuntu]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssh-keygen Cookie]]></title>
    <url>%2F2019%2F04%2F27%2Fcoreutil%2Fssh-keygen%2F</url>
    <content type="text"><![CDATA[gen 4096 bit RSA Key1ssh-keygen -b 4096 gen 256 bit ECDSA Key1ssh-keygen -t ed25519 args-f 指定名字 -C 添加备注 copy id1ssh-copy-id -i ~/.ssh/my.pub -p 21 username@remote-server args note -i 指定证书文件，默认为~/.ssh/id_rsa.pub -p 指定remote server ssh port username@ 指定用户 默认为当前操作用户 手工| dir | mod || ~/.ssh | 700 || id | 600 || id.pub | 600 || authorized_keys | 600 |]]></content>
      <categories>
        <category>coreutil</category>
      </categories>
      <tags>
        <tag>coreutil</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu nmcli]]></title>
    <url>%2F2019%2F04%2F26%2Fubuntu%2Fubuntu-nmcli%2F</url>
    <content type="text"><![CDATA[nmcli WIFI Configre 显示wifi接口12345nmcli d DEVICE TYPE STATE CONNECTION...wlan0 wifi disconnected -- set wifi on1nmcli r wifi on 显示wili列表12345nmcli d wifi list* SSID MODE CHAN RATE SIGNAL BARS SECURITY ... my_wifi Infra 5 54 Mbit/s 89 ▂▄▆█ WPA2 连接wifi1nmcli d wifi connect my_wifi password &lt;password&gt; 参考 1 2]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>coreutil</tag>
        <tag>ubuntu</tag>
        <tag>nmcli</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Intellij IDEA Cookies]]></title>
    <url>%2F2019%2F04%2F26%2Fidea%2Fidea-cookie%2F</url>
    <content type="text"><![CDATA[Intellij IDEA Gen serialVersionUIDcmd+, -&gt; Preferences -&gt; Editor -&gt; Inspections -&gt; Serialization issues -&gt; [checked]Serializable class without ‘serialVersionUID’ implements Serializable 后 Option + Enter 选 Add serialVersionUID field Intellij IDEA Gen serialVersionUID Plugin安装GenerateSerialVersionUID插件后,代码生成时会出现GenerateSerialVersionUID选项 javadoc中允许1行注释Code Style -&gt; Java -&gt; JavaDoc -&gt; Other -&gt; [选中] Do not wrap one line comments CleanUp Idea In Mac1234rm -rf ~/Library/Application\ Support/IntelliJIdea*rm -rf ~/Library/Caches/IntelliJIdea*rm -rf ~/Library/Preferences/IntelliJIdea*rm -rf ~/Library/Logs/IntelliJIdea* ref How to Uninstall IntelliJ on a Mac]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Regex Cookie]]></title>
    <url>%2F2019%2F04%2F26%2Fjava%2Fjava-regex%2F</url>
    <content type="text"><![CDATA[移除非a-zA-Z0-9空格-号以外的字符123jshell&gt; &quot;Hello - World !&quot;.replaceAll(&quot;[^a-zA-Z0-9 -]&quot;, &quot;&quot;); ...&gt;$1 ==&gt; &quot;Hello - World &quot;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apache Commons-Text]]></title>
    <url>%2F2019%2F04%2F26%2Fjava%2Fapache-commons-text%2F</url>
    <content type="text"><![CDATA[Apache Commons-Text包用于进行 HTML XML CSV JSON 字符处理的 StringEscapeUtils现已放入Commons-Text包 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-text&lt;/artifactId&gt; &lt;version&gt;1.6&lt;/version&gt;&lt;/dependency&gt;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gremlin Tutorial]]></title>
    <url>%2F2019%2F04%2F25%2Fgraphdbms%2Fgremlin%2F</url>
    <content type="text"><![CDATA[Gremlin是Apache TinkerPop开发的图遍历语言和虚拟机。适用于基于OLTP的图数据库以及基于OLAP的图处理器。1 Neo4j 与 OrientDB 均支持Gremlin,完整列表参见 Microsfot的spring-data-gremlin Gremlin官方 DB-Engines Ranking of Graph DBMS]]></content>
      <categories>
        <category>GraphDBMS</category>
      </categories>
      <tags>
        <tag>GraphDBMS</tag>
        <tag>gremlin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install ElasticSearch]]></title>
    <url>%2F2019%2F04%2F25%2Felk%2Finstall-elasticsearch%2F</url>
    <content type="text"><![CDATA[Download ElasticSearch下载 Run12tar xvf elasticsearch-6.8.0.tar.gzelasticsearch-6.8.0/bin/elasticsearch 基本操作Status访问[http://localhost:9200](http://localhost:9200) 查看健康程度http://localhost:9200/_cat/health?v 查询Nodehttp://localhost:9200/_cat/nodes?v 查询indexcurl http://localhost:9200/_cat/indices?v 创建User的Indexcurl -XPUT &apos;localhost:9200/user&apos; 删除索引curl -XDELETE &apos;localhost:9200/user&apos; 在website索引中创建 blog 类型 的 document id为1123456curl -X PUT &apos;localhost:9200/website/blog/1?pretty&apos; -H &apos;Content-Type: application/json&apos; -d &apos;&#123; &quot;title&quot;: &quot;第一条blog&quot;, &quot;text&quot;: &quot;Just trying this out...&quot;, &quot;date&quot;: &quot;2019/01/01&quot;&#125;&apos; 获取document为1的文档curl &apos;localhost:9200/website/blog/1?pretty&apos; 返回文档的一部分curl &apos;localhost:9200/website/blog/1?pretty&amp;_source=title,text&apos; 只返回source部分curl &apos;localhost:9200/website/blog/1/_source&apos; 检查文档是否存在curl -i -XHEAD http://localhost:9200/website/blog/1 httpcode 200是找到 404是未找到 为ES7做准备type设置为 _doc 安ik中文分词1.download or compile optional 1 - download pre-build package from here: https://github.com/medcl/elasticsearch-analysis-ik/releases create plugin folder cd your-es-root/plugins/ &amp;&amp; mkdir ik unzip plugin to folder your-es-root/plugins/ik optional 2 - use elasticsearch-plugin to install ( supported from version v5.5.1 ): ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.0/elasticsearch-analysis-ik-6.3.0.zipNOTE: replace 6.3.0 to your own elasticsearch version ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.0/elasticsearch-analysis-ik-6.8.0.zip ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.2.0/elasticsearch-analysis-ik-7.2.0.zip 2.restart elasticsearch 测试分词(ES6) 查看索引 curl http://localhost:9200/_cat/indices?v 创建索引user curl -XPUT http://localhost:9200/user 创建mapping 设置_doc的mapping 每个字段的类型分词使用的分词器 12345678910curl -XPOST http://localhost:9200/user/_doc/_mapping -H &apos;Content-Type:application/json&apos; -d&apos;&#123; &quot;properties&quot;: &#123; &quot;content&quot;: &#123; &quot;type&quot;: &quot;text&quot;, &quot;analyzer&quot;: &quot;ik_max_word&quot;, &quot;search_analyzer&quot;: &quot;ik_smart&quot; &#125; &#125;&#125;&apos; 添加文档 1234567891011121314curl -XPOST http://10.1.1.176:9200/new/_doc/1 -H &apos;Content-Type:application/json&apos; -d&apos;&#123;&quot;content&quot;:&quot;美国留给伊拉克的是个烂摊子吗&quot;&#125;&apos;curl -XPOST http://10.1.1.176:9200/new/_doc/2 -H &apos;Content-Type:application/json&apos; -d&apos;&#123;&quot;content&quot;:&quot;公安部：各地校车将享最高路权&quot;&#125;&apos;curl -XPOST http://10.1.1.176:9200/new/_doc/3 -H &apos;Content-Type:application/json&apos; -d&apos;&#123;&quot;content&quot;:&quot;中国足球失去的9个月回不来了&quot;&#125;&apos;curl -XPOST http://10.1.1.176:9200/new/_doc/4 -H &apos;Content-Type:application/json&apos; -d&apos;&#123;&quot;content&quot;:&quot;中纪委网站喊话：想投案吗？可以宽大处理的那种&quot;&#125;&apos;curl -XPOST http://10.1.1.176:9200/new/_doc/5 -H &apos;Content-Type:application/json&apos; -d&apos;&#123;&quot;content&quot;:&quot;稀土是什么土？为啥中国的稀土最牛？&quot;&#125;&apos; 5.查找并高亮 1234567891011 curl -XPOST http://localhost:9200/new/_doc/_search -H &apos;Content-Type:application/json&apos; -d&apos;&#123; &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;content&quot; : &quot;中国&quot; &#125;&#125;, &quot;highlight&quot; : &#123; &quot;pre_tags&quot; : [&quot;&lt;em1&gt;&quot;, &quot;&lt;em2&gt;&quot;], &quot;post_tags&quot; : [&quot;&lt;/em11&gt;&quot;, &quot;&lt;/em2&gt;&quot;], &quot;fields&quot; : &#123; &quot;content&quot; : &#123;&#125; &#125; &#125;&#125;&apos; 6.测试分词 1234 curl -XGET &quot;http://localhost:9200/user/_analyze&quot; -H &apos;Content-Type: application/json&apos; -d&apos;&#123; &quot;text&quot;:&quot;中华人民共和国国歌MN hey john how areyou&quot;,&quot;tokenizer&quot;: &quot;ik_smart&quot;&#125;&apos; “size”: 1“from”:1 or 关系{ “query” : { “match” : { “desc” : “小红 小蓝” }}}’ and 关系 12345678910&#123; &quot;query&quot;: &#123; &quot;bool&quot;: &#123; &quot;must&quot;: [ &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;小红&quot; &#125; &#125;, &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;小蓝&quot; &#125; &#125; ] &#125; &#125;&#125;&apos; 内置分词器 standard （标准分词器） english （英文分词） chinese （中文分词） docker install es7.21234docker run -d --name elasticsearch72 -p 9201:9200 -p 9301:9300 \ -e &quot;discovery.type=single-node&quot; elasticsearch:7.2.0docker run -d --name kibana -p 5602:5601 kibana:7.1.0 7.11234docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 \ -e &quot;discovery.type=single-node&quot; elasticsearch:7.1.0docker run -d --name kibana -p 5601:5601 kibana:7.1.0 使用network 1234docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 \ -e &quot;discovery.type=single-node&quot; elasticsearch:7.1.0docker run -d --name kibana --net somenetwork -p 5601:5601 kibana:7.1.0 6.8.012docker run -d --name elasticsearch6 -p 9206:9200 -p 9306:9300 \ -e &quot;discovery.type=single-node&quot; elasticsearch:6.8.0 elasticsearch.yml关闭跨域12http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot; 1234567cluster.name: 集群的名字 node.name: 节点的名字path.data: /datapath.logs: /logsnetwork.host: 0.0.0.0http.port: 9200discovery.zen.ping.unicast.hosts: [&quot;192.168.0.2&quot;, &quot;192.168.0.3&quot;] 中文分词https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.0/elasticsearch-analysis-ik-7.1.0.zip Kibana server is not ready yet进入kibana容器，将/usr/share/kibana/config 中更新下elasticsearch配置 ES 语句获取myindex的mapping GET /myindex/_mapping keyword text 区别keyword 存储数据时候不分词只能搜索该字段的完整的值只用于filteringtext：存储数据时候，会自动分词并生成索引全文索引 long：有符号64-bit integer：-2^63 ~ 2^63 - 1integer：有符号32-bit integer，-2^31 ~ 2^31 - 1short：有符号16-bit integer，-32768 ~ 32767byte： 有符号8-bit integer，-128 ~ 127double：64-bit IEEE 754 浮点数float：32-bit IEEE 754 浮点数half_float：16-bit IEEE 754 浮点数scaled_float布尔 - boolean值：false, “false”, true, “true”日期 - date由于Json没有date类型，所以es通过识别字符串是否符合format定义的格式来判断是否为date类型format默认为：strict_date_optional_time||epoch_millis format es 时间123456789101112131415161718192021222324PUT /my_indexPOST /my_index/_mapping&#123; &quot;properties&quot;: &#123; &quot;date&quot;: &#123; &quot;type&quot;: &quot;date&quot; , &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot; &#125; &#125;&#125;PUT my_index/_doc/1&#123; &quot;date&quot;: &quot;2015-01-01&quot; &#125; PUT my_index/_doc/2&#123; &quot;date&quot;: &quot;2015-01-01T12:10:30Z&quot; &#125; PUT my_index/_doc/3&#123; &quot;date&quot;: 1420070400001 &#125; GET my_index/_search&#123; &quot;sort&quot;: &#123; &quot;date&quot;: &quot;asc&quot;&#125; &#125; reindexPOST _reindex{ “source”: { “index”: “beforeinex” }, “dest”: { “index”: “afterindex” }} 区分映射analyzer 还用于索引时可选的 search_analyzer 它仅会应用于搜索时 自定词典测试分词 1234curl -XGET &quot;http://localhost:9200/_analyze?pretty&quot; -H &apos;Content-Type: application/json&apos; -d&apos;&#123; &quot;text&quot;:&quot;可口可乐非空好喝吗 john how areyou&quot;,&quot;tokenizer&quot;: &quot;ik_smart&quot;&#125;&apos; 编辑ik配置 cat /usr/share/elasticsearch/plugins/ik/config/IKAnalyzer.cfg.xml1234567891011121314&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;&lt;properties&gt; &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt; &lt;!--用户可以在这里配置自己的扩展字典 --&gt; &lt;entry key="ext_dict"&gt;&lt;/entry&gt; &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt; &lt;entry key="ext_stopwords"&gt;&lt;/entry&gt; &lt;!--用户可以在这里配置远程扩展字典 --&gt; &lt;!--这里一定要注意把注释去了--&gt; &lt;entry key="remote_ext_dict"&gt;http://ip:port/es/dict&lt;/entry&gt; &lt;!--用户可以在这里配置远程扩展停止词字典--&gt; &lt;!-- &lt;entry key="remote_ext_stopwords"&gt;words_location&lt;/entry&gt; --&gt;&lt;/properties&gt; 可选本地词典和远程词典,一行一个词 ES每分会获取一次，并检测http头Last-Modified 及 ETag 有变化就会更新 加载远程词es会每分钟获取一次远程词典,加载词典时log中会出现加载的单词信息, 如 12345678&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2019-07-11T03:25:56,733+0000&quot;, &quot;level&quot;: &quot;INFO&quot;, &quot;component&quot;: &quot;o.w.a.d.Monitor&quot;, ... &quot;message&quot;: &quot;重新加载词典...&quot; &#125;&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2019-07-11T03:25:56,734+0000&quot;, &quot;level&quot;: &quot;INFO&quot;, &quot;component&quot;: &quot;o.w.a.d.Monitor&quot;, ... &quot;message&quot;: &quot;try load config from /usr/share/elasticsearch/config/analysis-ik/IKAnalyzer.cfg.xml&quot; &#125;&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2019-07-11T03:25:56,735+0000&quot;, &quot;level&quot;: &quot;INFO&quot;, &quot;component&quot;: &quot;o.w.a.d.Monitor&quot;, ... &quot;message&quot;: &quot;try load config from /usr/share/elasticsearch/plugins/ik/config/IKAnalyzer.cfg.xml&quot; &#125;&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2019-07-11T03:25:56,877+0000&quot;, &quot;level&quot;: &quot;INFO&quot;, &quot;component&quot;: &quot;o.w.a.d.Monitor&quot;, ... &quot;message&quot;: &quot;[Dict Loading] http://192.168.1.3/dict.txt&quot; &#125;&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2019-07-11T03:25:56,883+0000&quot;, &quot;level&quot;: &quot;INFO&quot;, &quot;component&quot;: &quot;o.w.a.d.Monitor&quot;, ... &quot;message&quot;: &quot;非空&quot; &#125;&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2019-07-11T03:25:56,884+0000&quot;, &quot;level&quot;: &quot;INFO&quot;, &quot;component&quot;: &quot;o.w.a.d.Monitor&quot;, ... &quot;message&quot;: &quot;测试结果&quot; &#125;&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2019-07-11T03:25:56,884+0000&quot;, &quot;level&quot;: &quot;INFO&quot;, &quot;component&quot;: &quot;o.w.a.d.Monitor&quot;, ... &quot;message&quot;: &quot;楼楼楼&quot; &#125;&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2019-07-11T03:25:56,885+0000&quot;, &quot;level&quot;: &quot;INFO&quot;, &quot;component&quot;: &quot;o.w.a.d.Monitor&quot;, ... &quot;message&quot;: &quot;重新加载词典完毕...&quot; &#125; SpringBoot 动态生成词典Docker ElasticSearch 7.1SpringBoot 2.1.4JDK 1.8由 Controller 生成词典并由ES7.1 ik加载词典，已成功 SpringBoot 需要使用@RestController 并最好分别创建method = RequestMethod.HEADmethod = RequestMethod.GET的controler ES每次调用两次remote_dict_url第一次调用 HEAD然后调用 GET 从数据库生成dict时最好放至GET请求中,HEAD调用时就不要用了. 设置头 Last-Modified 和 ETag ref 测试远程分支1234curl -XGET &quot;http://ej.stan.cc:9200/_analyze&quot; -H &apos;Content-Type: application/json&apos; -d&apos;&#123; &quot;text&quot;:&quot;测试非空分词&quot;,&quot;tokenizer&quot;: &quot;ik_max_word&quot;&#125;&apos; 引用 Elasticsearch 默认分词器和中分分词器之间的比较及使用方法 Elasticsearch 移除 type 之后的新姿势 全文搜索引擎 Elasticsearch 入门教程 Elasticsearch 可用的中文分词器使用 Elasticsearch 系统默认分词器 全文搜索引擎 Elasticsearch 集群搭建入门教程 IK中文分词 全文搜索引擎 Elasticsearch 入门教程 全文搜索引擎 Elasticsearch 集群搭建入门教程 elasticsearch的keyword与text的区别 Elasticsearch 时间类型总结 ES手册 Elasticsearch性能优化总结 ES性能优化 19 个很有用的 ElasticSearch 查询语句 Highlighting 热更新 IK 分词使用方法 Elasticsearch热词(新词/自定义词)更新配置 *为Elasticsearch添加中文分词，对比分词器效果]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>elk</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Awk Cookie]]></title>
    <url>%2F2019%2F04%2F24%2Fcoreutil%2Fawk%2F</url>
    <content type="text"><![CDATA[awk FS 分割符表达在java中使用\u0001打印的分割符号1awk -F "\x01" vim中 0x1c 会显示为亮 ^\ 这个符号是ASCII FS 0x1c 28 FILE SEPARATOR (IS4)1awk -F "\0x1c" 如果分隔符号是 |0x1c awk中使用1awk -F "\\|\0x1c" 使用,或;分割1awk -F ",|;"]]></content>
      <categories>
        <category>coreutil</category>
      </categories>
      <tags>
        <tag>awk</tag>
        <tag>coreutil</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[History Cookie]]></title>
    <url>%2F2019%2F04%2F24%2Fcoreutil%2Fhistory%2F</url>
    <content type="text"><![CDATA[清理history1history -c]]></content>
      <categories>
        <category>coreutil</category>
      </categories>
      <tags>
        <tag>coreutil</tag>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu Mirror]]></title>
    <url>%2F2019%2F04%2F24%2Fubuntu%2Fubuntu-mirror%2F</url>
    <content type="text"><![CDATA[Ubuntu mirror address name url 163 http://mirrors.163.com/ubuntu/ 清华大学开源软件镜像站 https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ 中科大镜像源 https://mirrors.ustc.edu.cn/ubuntu/ 北京交通大学 https://mirror.bjtu.edu.cn/ubuntu/ 官方 http://archive.ubuntu.com/ubuntu 18.04 tsinghua12345678910cat /etc/apt/sources.list.d/official-package-repositories.list deb http://packages.linuxmint.com sonya main upstream import backportdeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial-updates main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial-backports main restricted universe multiversedeb http://security.ubuntu.com/ubuntu/ xenial-security main restricted universe multiversedeb http://archive.canonical.com/ubuntu/ xenial partner 18.04 docker123cat additional-repositories.listdeb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu Server apt 安装 sshd]]></title>
    <url>%2F2019%2F04%2F23%2Fubuntu%2Fubuntu-sshd%2F</url>
    <content type="text"><![CDATA[apt install openssh server1sudo apt install openssh-server start ssh server1service ssh start]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Neo4j With Docker]]></title>
    <url>%2F2019%2F04%2F22%2Fdocker%2Fdocker-neo4j%2F</url>
    <content type="text"><![CDATA[使用Docker安装Neo4j1234567docker run \ --detach \ --publish=7474:7474 --publish=7687:7687 \ --volume=$HOME/neo4j/data:/data \ --volume=$HOME/neo4j/logs:/logs \ --env=NEO4J_dbms_memory_pagecache_size=4G \ neo4j:3.5 web界面http://localhost:7474/browser/ neo4j/neo4` Neo4j Movies Example with Spring Data Neo4jhttps://github.com/neo4j-examples/movies-java-spring-data-neo4j Neo4j Client下载Neo4j-Client 1brew install cleishm/neo4j/neo4j-client neo4j-client -u neo4j localhost]]></content>
      <categories>
        <category>neo4j</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring-boot-starter-data-neo4j 在OpenJDK8出现No class information found in OGM meta-data for class]]></title>
    <url>%2F2019%2F04%2F22%2Fgraphdbms%2Fneo4j-no-class-found-in-ogm%2F</url>
    <content type="text"><![CDATA[现象在OpenJDK 1.8中使用java -jar sdn5-movies-0.0.1-SNAPSHOT.jar 时出现 No class information found in OGM meta-data for classmovies.spring.data.neo4j.domain.Person` 错误. 添加mvn配置12345&lt;dependency&gt; &lt;groupId&gt;io.github.lukehutch&lt;/groupId&gt; &lt;artifactId&gt;fast-classpath-scanner&lt;/artifactId&gt; &lt;version&gt;3.1.13&lt;/version&gt;&lt;/dependency&gt; 参考issuse 604]]></content>
      <categories>
        <category>GraphDBMS</category>
      </categories>
      <tags>
        <tag>neo4j</tag>
        <tag>SpringBoot</tag>
        <tag>GraphDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LogStash Note]]></title>
    <url>%2F2019%2F04%2F21%2Felk%2FLogStash-Note%2F</url>
    <content type="text"><![CDATA[将logs目录下的所有log文件发送至Kafka 环境信息 logstash version 6.0.1 kafka 192.168.1.2:9002 kafka topic myapplog log目录 /MyApp/logs/ logstash config12345678910111213input &#123; file &#123; path =&gt; &quot;/MyApp/logs/*.log&quot; start_position =&gt; &quot;beginning&quot; &#125;&#125;output &#123; kafka &#123; bootstrap_servers =&gt; &quot;192.168.1.2:9092&quot; topic_id =&gt; &quot;myapplog&quot; compression_type =&gt; &quot;gzip&quot; # string (optional)， one of [&quot;none&quot;， &quot;gzip&quot;， &quot;snappy&quot;]， default: &quot;none&quot; &#125;&#125; 运行logstash1logstash -f apiweblogstash.conf 测试监听myapplog主题并查看消息 1kafkacat -C -b 192.168.1.2:9092 -t myapplog]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>logstash</tag>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac mini 换SSD硬盘]]></title>
    <url>%2F2019%2F04%2F21%2Fmac%2Fmac-mini%E6%8D%A2SSD%E7%A1%AC%E7%9B%98%2F</url>
    <content type="text"><![CDATA[为Mac提速，打算再战两年，于是给Mac mini换了新的SSD ,之前那块500GB硬盘放到了第二个SATA槽中用来放文件仓库，第一块SSD主要用来放系统，常用应用，已获得更高速度。 数据备份换SSD之前先插上一个USB硬盘，使用Time Machine做个备份 这样的话，在换好SSD后开机按Option键，可以选择使用Time Machine备份恢复系统 SSD硬盘的选择我用的是PLEXTOR PX-128M5Pro 这个牌子和其它牌子比起来有独家的True Speed技术，读写速度不会随着盘的使用量增加而减慢 这个牌子和普通和Pro的区别，128的写入速度快了1/3，质保从3年延长至5年, Pro是7mm超薄的，还送一个3.5mm支架 2013年12月30日 PLEXTOR更新了固件至1.6 买后记得更新下 仓位名称不用关心是2012还是2013前半年，直接去｛系统系统｝查看SATA/SATA Express中现在用的仓位就好了 硬盘如果只是由机械硬盘换SSD而不上第二块的话，只拆开一点就行了， 如果是换了SSD后还要将原来的硬盘放到第二个槽挂两块硬盘的话，要买第二个槽的SATA线，同时最好把机器全拆开上 硬盘线大约50-100元，一般还送螺丝刀，螺丝，塑料垫 SSD速度测试使用Disk Speed Test测试，SSD达到了他盒子上标的速度 (Disk Speed Test 在App Store可以免费下载) 个人感觉: 过程不难，但要细心，我用了2个小时才上好2个硬盘，Time Machine恢复系统后花了1个多小时。 换了SSD以后启动速度变快好多，现在点应用图标没有了以前的卡顿的感觉。 Time Machine 是个好软件，用好的话很方便。 参考 优酷视频: OWC 介绍 2012 Mac mini 添加第二块硬盘 拒绝误导：10分钟快速解决Mac Mini更换SSD问题 如何给MAC MINI 2012加装SSD Plextor M5S 256GB SSD ＋ Mac mini SSD換裝筆記 mac mini 2012版更换ssd，使用Time Machine恢复重装系 淘宝青州小熊-苹果apple 功能同ifixit mac mini 第二双硬盘线套件 dual disk]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>mac mini</tag>
        <tag>SSD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS 创建 PlayStation4 安装U盘]]></title>
    <url>%2F2019%2F04%2F19%2Fmac%2Fmac-ps4-install-usb-stock%2F</url>
    <content type="text"><![CDATA[本文将在Mac上制作PlayStation4系统安装U盘, 需要U盘空间大于1.1G。在制作过程中将格式化U盘，请自行备份U盘文件 Setup1 获取PlayStation4新安装文件从PlayStationHK下载更新文件 分为标准更新、新安装两种，本次我们将使用U盘安装全新的PlayStation系统，因此采用新安装文件。 wget http://dsa01.ps4.update.playstation.net/update/ps4/image/2019_0319/rec_7bd82d7957611fe9bca3fa63b78c82c5/PS4UPDATE.PUP Setup2 格式化U盘 将U盘格式化为ExtFAT文件格式，因为PlayStation4 支持这种格式 接入U盘之前查看目前硬盘列表 diskutil list 将U盘接入Mac后再次查看硬盘列表 diskutil list 对比多出的即为U盘 本例中为 `/dev/disk2` 卸载disk2 diskutil unmountDisk disk2 将/dev/disk2 格式化为ExtFAT 文件系统，并使用MBR格式的硬盘分区表, 格式化后的U盘名字为PS4Install diskutil eraseDisk ExFAT PS4Install MBR /dev/disk2 Setup3 拷贝PlayStation4 系统文件在U盘根目录创建PS4文件夹，在PS4文件夹中创建UPDATE文件夹 -or- 使用命令创建: mkdir -p /Volumes/PS4Install/PS4/UPDATE 将下载好的 PS4UPDATE.PUP 拷贝至刚创建完的UPDATE目录中即可. 至此启动盘制作结束。]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>macOS</tag>
        <tag>安装U盘</tag>
        <tag>PlayStation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS diskutil command tool]]></title>
    <url>%2F2019%2F04%2F18%2Fmac%2Fmac-diskutil%2F</url>
    <content type="text"><![CDATA[查看硬盘列表diskutil list /dev/disk2 : deviceNode TYPE : File System NAME : diskName diskutil若干需要sudo权限 卸载disk2diskutil unmountDisk disk2 eraseDisk之前需要选unmountDisk 格式化 eraseDisk 子命令diskutil eraseDisk FILE_SYSTEM DISK_NAME [APM[Format]|MBR[Format]|GPT[Format]] MountPoint|DiskIdentifier|DeviceNode 将/dev/disk2 格式化为JHFS+ 的几种写法示例: 1234diskutil eraseDisk JHFS+ TestDisk /dev/disk2diskutil eraseDisk JHFS+ TestDisk disk2diskutil eraseDisk JHFS+ TestDisk disk2 #1diskutil eraseDisk JHFS+ TestDisk /dev/disk2s1 将 /dev/disk2 格式化为 ExFAT 并分别使用MBR GPT分区表的几种写法示例: 123diskutil eraseDisk ExFAT TestDisk /dev/disk2diskutil eraseDisk ExFAT TestDisk MBRFormat /dev/disk2diskutil eraseDisk ExFAT TestDisk GPT /dev/disk2 File System - - JHFS+ Mac OS Extended Journaled HFS + Mac OS Extended ExFAT Windows FAT32 Windows 分区表格式 - - APM Apple Partition Map GPT UEFI-style GUID Partition Table MBR MS-DOS Master Boot Record 格式化将disk2分成一个分区: diskutil partitionDisk disk2 1 \ JHFS+ one R 将disk2分成2个分区,第2分区为JHFS+格式250G大小, 第1分区为JHFS+格式并使用硬盘剩余大小 diskutil partitionDisk disk3 2 GPT \ JHFS+ one R \ JHFS+ two 250G 将disk2分成3个分区, 第三分区10G ExFAT格式, 第二分区 250G JHFS+格式， 第一分区使用剩余空间 JHFS+格式 diskutil partitionDisk disk3 MBR \ JHFS+ one R \ JHFS+ two 250G \ ExFAT three 10G 硬盘空间单位可选:B, K, M, G, T, P, % , R(剩余) 删除 disk2的APFS 容器diskutil apfs deleteContainer /dev/disk2 ref: https://tobywf.com/2017/01/diskutil/]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>macOS</tag>
        <tag>diskutil</tag>
        <tag>command Tools</tag>
      </tags>
  </entry>
</search>
